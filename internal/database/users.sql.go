// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
)

const loginUser = `-- name: LoginUser :one
SELECT user_id, username, email, phonenumber, password, last_login, isemailverified, isphoneverified FROM Users WHERE username = $1 AND password = crypt($2, password)
`

type LoginUserParams struct {
	Username string `json:"username"`
	Crypt    string `json:"crypt"`
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, loginUser, arg.Username, arg.Crypt)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.LastLogin,
		&i.Isemailverified,
		&i.Isphoneverified,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO Users(username,email,password)
VALUES ($1,$2,$3)
RETURNING user_id, username, email, phonenumber, password, last_login, isemailverified, isphoneverified
`

type RegisterUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, registerUser, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.LastLogin,
		&i.Isemailverified,
		&i.Isphoneverified,
	)
	return i, err
}
